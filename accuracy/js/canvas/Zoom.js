// Generated by CoffeeScript 1.8.0
(function() {
  define(["paper"], function(paper) {
    var Matrix, Point, Rectangle;
    Rectangle = paper.Rectangle, Matrix = paper.Matrix, Point = paper.Point;
    return (function() {
      function _Class(views) {
        this.views = views;
        this.setBounds();
        this.views[0].on("resize", (function(_this) {
          return function() {
            return _this.updateMin();
          };
        })(this));
      }

      _Class.prototype.setBounds = function(image) {
        this.image = new Rectangle(image);
        this.updateMin();
        this.fit();
        return this;
      };

      _Class.prototype.updateMin = function() {
        var ratio;
        ratio = this.views[0].viewSize.divide(this.image.size);
        this.min = Math.min(1, ratio.width, ratio.height);
        return this;
      };

      _Class.prototype.fit = function() {
        this.zoom(this.min);
        return this;
      };

      _Class.prototype.zoom = function(zoom, center) {
        var i, matrix, view, _ref;
        zoom = Math.max(Math.min(1, zoom), this.min);
        matrix = this.fixMatrix(new Matrix().scale(zoom / this.views[0].zoom, center));
        _ref = this.views;
        for (i in _ref) {
          view = _ref[i];
          view._transform(matrix);
          view._zoom = zoom;
        }
        return this;
      };

      _Class.prototype.scale = function(scale, center) {
        this.zoom(this.views[0].zoom * scale, center);
        return this;
      };

      _Class.prototype.scroll = function(vector) {
        var i, matrix, view, _ref;
        vector = new Point(vector).divide(this.views[0].zoom).negate();
        matrix = this.fixMatrix(new Matrix().translate(vector));
        _ref = this.views;
        for (i in _ref) {
          view = _ref[i];
          view._transform(matrix);
        }
        return this;
      };

      _Class.prototype.fixMatrix = function(matrix) {
        var box, image, vector;
        matrix = new Matrix(matrix);
        box = this.views[0].bounds;
        image = this.image;
        vector = new Point(0, 0);
        box = new Rectangle(matrix.inverseTransform(box.topLeft), matrix.inverseTransform(box.bottomRight));
        if (image.width < box.width) {
          vector.x = box.center.x - image.center.x;
        } else if (image.left > box.left) {
          vector.x = box.left - image.left;
        } else if (image.right < box.right) {
          vector.x = box.right - image.right;
        }
        if (image.height < box.height) {
          vector.y = box.center.y - image.center.y;
        } else if (image.top > box.top) {
          vector.y = box.top - image.top;
        } else if (image.bottom < box.bottom) {
          vector.y = box.bottom - image.bottom;
        }
        return matrix.translate(vector);
      };

      _Class.prototype.absolutePoint = function(point) {
        return this.views[0].viewToProject(point);
      };

      return _Class;

    })();
  });

}).call(this);

//# sourceMappingURL=Zoom.js.map
