// Generated by CoffeeScript 1.8.0
(function() {
  define(["paper"], function(paper) {
    var Circle, Color, Group, PointText, Rectangle, Size, _ref;
    Rectangle = paper.Rectangle, Color = paper.Color, (_ref = paper.Path, Circle = _ref.Circle), PointText = paper.PointText, Group = paper.Group, Size = paper.Size;
    if (window.painter == null) {
      window.painter = {};
    }
    return (function() {
      function _Class(canvas) {
        paper.setup(canvas);
        this.project = paper.project;
        this.view = this.project.view;
        this.bounds = new Rectangle;
        this.color = new Color;
        this.text = "";
        this.circle = new Circle({
          radius: 5
        });
        this.pointText = new PointText({
          font: "monospace"
        });
        this.group = new Group({
          children: [this.circle, this.pointText],
          visible: false
        });
        this.changed = false;
      }

      _Class.prototype.setSize = function(size) {
        this.bounds.setSize(new Size(size, size));
        this.changed = true;
        return this;
      };

      _Class.prototype.setColor = function(color) {
        this.color = color;
        this.changed = true;
        return this;
      };

      _Class.prototype.setText = function(text) {
        this.text = text;
        this.changed = true;
        return this;
      };

      _Class.prototype.draw = function(position) {
        var delta;
        if (this.changed) {
          this.circle.setStrokeColor(this.color);
          this.pointText.setFillColor(this.color);
          this.bounds.setCenter(position);
          this.circle.fitBounds(this.bounds);
          this.pointText.setContent(this.text);
          this.pointText.setPosition(this.bounds.topCenter.subtract([0, this.pointText.bounds.height]));
          this.changed = false;
        } else {
          delta = this.bounds.center.subtract(position).negate();
          this.group.translate(delta);
          this.bounds.setCenter(position);
        }
        this.group.setVisible(true);
        this.view.draw();
        return this;
      };

      _Class.prototype.hide = function() {
        this.group.setVisible(false);
        this.view.draw();
        return this;
      };

      _Class.prototype.show = function() {
        this.group.setVisible(true);
        this.view.draw();
        return this;
      };

      return _Class;

    })();
  });

}).call(this);

//# sourceMappingURL=Position.js.map
