// Generated by CoffeeScript 1.7.1
(function() {
  var debounce, initialize, thatDocument;

  thatDocument = document.currentScript.ownerDocument;

  debounce = function(func, wait, immediate) {
    var args, callNow, context, later, timeout;
    timeout = context = args = callNow = null;
    later = function() {
      timeout = null;
      if (!callNow) {
        return func.apply(context, args);
      }
    };
    return function() {
      context = this;
      args = arguments;
      callNow = immediate && (timeout == null);
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        return func.apply(context, args);
      }
    };
  };

  initialize = function($, Painter, host, shadow, paper) {
    var $host, painter, resize, transformToElement, url, viewport;
    painter = new Painter($("#image", shadow)[0], $("#draw", shadow)[0]);
    url = "https://upload.wikimedia.org/wikipedia/commons/9/99/Leonardo_Sala_delle_Asse_detail.jpg";
    painter.showImage(url, 804, 1031);
    painter.setTool({
      tool: "pen",
      color: "red",
      size: 3
    });
    viewport = $('#viewport', shadow);
    resize = function() {
      painter.resize(viewport.width(), viewport.height());
      return painter.fit();
    };
    resize();
    $(window).on("resize", debounce(resize, 200, true));
    $host = $(host);
    transformToElement = function(_arg) {
      var offset, x, y;
      x = _arg.x, y = _arg.y;
      offset = $host.offset();
      x -= offset.left;
      y -= offset.top;
      if ($host.css("transform") !== "none") {
        x = $host.width() - x;
        y = $host.height() - y;
      }
      return {
        x: x,
        y: y
      };
    };
    viewport.on("touchstart", function(_arg) {
      var e, touch, _i, _len, _ref;
      e = _arg.originalEvent;
      _ref = e.changedTouches;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        touch = _ref[_i];
        painter.beginPath(touch.identifier);
        painter.setPoint(painter.absolutePoint(transformToElement({
          x: touch.pageX,
          y: touch.pageY
        })), touch.identifier);
      }
    });
    viewport.on("touchmove", function(_arg) {
      var e, offset, touch, _i, _len, _ref;
      e = _arg.originalEvent;
      offset = $host.offset();
      _ref = e.changedTouches;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        touch = _ref[_i];
        painter.setPoint(painter.absolutePoint(transformToElement({
          x: touch.pageX,
          y: touch.pageY
        })), touch.identifier);
      }
    });
    return viewport.on("touchend touchcancel", function(_arg) {
      var e, offset, touch, _i, _len, _ref;
      e = _arg.originalEvent;
      offset = $host.offset();
      _ref = e.changedTouches;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        touch = _ref[_i];
        painter.setPoint(painter.absolutePoint(transformToElement({
          x: touch.pageX,
          y: touch.pageY
        })), touch.identifier);
        painter.endPath(touch.identifier);
      }
    });
  };

  require(["jquery", "../accuracy/js/canvas/Painter", "mousewheel"], function($, Painter) {
    return $(function() {
      var proto, tmpl;
      proto = Object.create(HTMLElement.prototype);
      tmpl = $("template", thatDocument);
      proto.attributeChangedCallback = function() {
        return $(window).trigger("resize");
      };
      proto.attachedCallback = function() {
        var clone, shadow;
        clone = document.importNode(tmpl[0].content, true);
        shadow = this.createShadowRoot();
        shadow.appendChild(clone);
        return initialize($, Painter, this, shadow);
      };
      return document.registerElement('accuracy-game', {
        prototype: proto
      });
    });
  });

}).call(this);

//# sourceMappingURL=index.map
